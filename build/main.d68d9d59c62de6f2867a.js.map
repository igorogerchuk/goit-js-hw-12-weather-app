{"version":3,"sources":["webpack:///./fetchWeather.js","webpack:///./index.js","webpack:///./getGeoPosition.js"],"names":["fetchWeather","query","fetch","base","PNotify","defaults","styling","icons","refs","weatherSection","document","querySelector","icon","location","temperature","humidity","wind","conditions","searchForm","displayWeather","weather","src","current","condition","textContent","name","temp_c","wind_kph","text","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","then","coords","latitude","longitude","success","response","json","classList","remove","error","addEventListener","e","preventDefault","currentTarget","elements","city","value"],"mappings":"2LAAe,SAASA,EAAaC,GAInC,OAAOC,MAAMC,yCADU,0CAA6CF,kCCMtEG,IAAQC,SAASC,QAAU,WAC3BF,IAAQC,SAASE,MAAQ,WAEzB,IAAMC,EAAO,CACXC,eAAgBC,SAASC,cAAc,YACvCC,KAAMF,SAASC,cAAc,SAC7BE,SAAUH,SAASC,cAAc,+BACjCG,YAAaJ,SAASC,cAAc,2BACpCI,SAAUL,SAASC,cAAc,+BACjCK,KAAMN,SAASC,cAAc,2BAC7BM,WAAYP,SAASC,cAAc,iCACnCO,WAAYR,SAASC,cAAc,iBA6CrC,SAASQ,EAAeC,GACtBZ,EAAKI,KAAKS,IAAM,SAAWD,EAAQE,QAAQC,UAAUX,KACrDJ,EAAKK,SAASW,YAAcJ,EAAQP,SAASY,KAC7CjB,EAAKM,YAAYU,YAAcJ,EAAQE,QAAQI,OAAS,IACxDlB,EAAKO,SAASS,YAAcJ,EAAQE,QAAQP,SAAW,IACvDP,EAAKQ,KAAKQ,YAAcJ,EAAQE,QAAQK,SAAW,MACnDnB,EAAKS,WAAWO,YAAcJ,EAAQE,QAAQC,UAAUK,KClEjD,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,UAAUC,YAAYC,mBAAmBJ,EAASC,KDkBnDI,KAAK,SAAAtB,GACJ,IAEMZ,EAFWY,EAASuB,OAAOC,SAEtB,IADOxB,EAASuB,OAAOE,UAG9BrC,IACFG,IAAQmC,QAAQ,CACdX,KAAM,qCAER5B,EAAaC,GACVkC,KAAK,SAAAK,GAAQ,OAAIA,EAASC,SAC1BN,KAAK,SAAAf,GACJZ,EAAKC,eAAeiC,UAAUC,OAAO,aACrCxB,EAAeC,QAdzB,MAkBS,SAAAwB,GACLxC,IAAQwC,MAAM,CACZhB,KAAM,wEAIZpB,EAAKU,WAAW2B,iBAAiB,SAEjC,SAA2BC,GACzBA,EAAEC,iBAEF/C,EADa8C,EAAEE,cAAcC,SAASC,KAAKC,OAExChB,KAAK,SAAAK,GAAQ,OAAIA,EAASC,SAC1BN,KAAK,SAAAf,GACJZ,EAAKC,eAAeiC,UAAUC,OAAO,aACrCxB,EAAeC,KAJnB,MAMS,SAAAwB,GACLxC,IAAQwC,MAAM,CACZhB,KAAM","file":"main.d68d9d59c62de6f2867a.js","sourcesContent":["export default function fetchWeather(query) {\r\n  const base = 'https://api.apixu.com/v1/';\r\n  const resource = 'current.json';\r\n  const requestParameters = `?key=1f404656e7ff496abf1220436191707&q=${query}`;\r\n  return fetch(base + resource + requestParameters);\r\n}\r\n","import PNotify from 'pnotify/dist/es/PNotify.js';\r\nimport PNotifyButtons from 'pnotify/dist/es/PNotifyButtons.js';\r\nimport PNotifyStyleMaterial from 'pnotify/dist/es/PNotifyStyleMaterial.js';\r\nimport getGeoPosition from './getGeoPosition';\r\nimport fetchWeather from './fetchWeather';\r\nimport 'pnotify/dist/PNotifyBrightTheme.css';\r\nimport 'material-design-icons/iconfont/material-icons.css';\r\nimport './styles.css';\r\n\r\nPNotify.defaults.styling = 'material';\r\nPNotify.defaults.icons = 'material';\r\n\r\nconst refs = {\r\n  weatherSection: document.querySelector('#weather'),\r\n  icon: document.querySelector('.icon'),\r\n  location: document.querySelector('span[data-field=\"location\"]'),\r\n  temperature: document.querySelector('span[data-field=\"temp\"]'),\r\n  humidity: document.querySelector('span[data-field=\"humidity\"]'),\r\n  wind: document.querySelector('span[data-field=\"wind\"]'),\r\n  conditions: document.querySelector('span[data-field=\"conditions\"]'),\r\n  searchForm: document.querySelector('#search-form'),\r\n};\r\n\r\ngetGeoPosition()\r\n  .then(location => {\r\n    const latitude = location.coords.latitude;\r\n    const longitude = location.coords.longitude;\r\n    const query = `${latitude},${longitude}`;\r\n\r\n    if (query) {\r\n      PNotify.success({\r\n        text: 'Показана погода в вашем регионе.',\r\n      });\r\n      fetchWeather(query)\r\n        .then(response => response.json())\r\n        .then(weather => {\r\n          refs.weatherSection.classList.remove('is-hidden');\r\n          displayWeather(weather);\r\n        });\r\n    }\r\n  })\r\n  .catch(error => {\r\n    PNotify.error({\r\n      text: 'Нет прав доступа к геопозиции, используйте поиск по имени города.',\r\n    });\r\n  });\r\n\r\nrefs.searchForm.addEventListener('submit', searchFormHandler);\r\n\r\nfunction searchFormHandler(e) {\r\n  e.preventDefault();\r\n  const city = e.currentTarget.elements.city.value;\r\n  fetchWeather(city)\r\n    .then(response => response.json())\r\n    .then(weather => {\r\n      refs.weatherSection.classList.remove('is-hidden');\r\n      displayWeather(weather);\r\n    })\r\n    .catch(error => {\r\n      PNotify.error({\r\n        text: 'Города с таким названием не найдено.',\r\n      });\r\n    });\r\n}\r\n\r\nfunction displayWeather(weather) {\r\n  refs.icon.src = 'https:' + weather.current.condition.icon;\r\n  refs.location.textContent = weather.location.name;\r\n  refs.temperature.textContent = weather.current.temp_c + '\\u2103';\r\n  refs.humidity.textContent = weather.current.humidity + '%';\r\n  refs.wind.textContent = weather.current.wind_kph + 'kph';\r\n  refs.conditions.textContent = weather.current.condition.text;\r\n}\r\n","export default function getGeoPosition() {\r\n  const options = {\r\n    maximumAge: 1800000,\r\n  };\r\n\r\n  return new Promise((resolve, reject) => {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject);\r\n  });\r\n}\r\n"],"sourceRoot":""}